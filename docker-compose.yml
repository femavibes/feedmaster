services:
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: feedmaster_db
      POSTGRES_USER: datamaster
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Loaded from .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  api:
    build: .
    restart: unless-stopped
    command: python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000" # Maps host port 8000 to container port 8000
    volumes:
      - .:/app
      - ./config:/app/config
    environment:
      PYTHONPATH: /app # Ensures 'backend' package is found
    env_file: .env
    depends_on:
      db:
        condition: service_healthy

  aggregator_worker:
    build: .
    restart: unless-stopped
    command: python -m backend.aggregator_worker
    volumes:
      - .:/app
      - ./config:/app/config
    environment:
      PYTHONPATH: /app
    env_file: .env
    depends_on:
      db:
        condition: service_healthy

  polling_worker:
    build: .
    restart: unless-stopped
    command: python -m backend.polling_worker
    volumes:
      - .:/app
      - ./config:/app/config
    environment:
      PYTHONPATH: /app
    env_file: .env
    depends_on:
      db:
        condition: service_healthy

  ingestion_worker: # NEW SERVICE ADDED HERE
    build: .
    restart: unless-stopped
    command: python -m backend.ingestion_worker
    volumes:
      - .:/app
      - ./config:/app/config
    environment:
      PYTHONPATH: /app
    env_file: .env
    depends_on:
      db:
        condition: service_healthy

  stats_worker:
    build: .
    restart: unless-stopped
    command: python -m backend.stats_worker
    volumes:
      - .:/app
      - ./config:/app/config
    environment:
      PYTHONPATH: /app
    env_file: .env
    depends_on:
      db:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  cloudflared-tunnel:
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    depends_on:
      - api

volumes:
  pgdata:
  redis_data: