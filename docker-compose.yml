# backend/docker-compose.yml
#
# This file defines the services for your Feedmaster backend application
# using Docker Compose. It orchestrates:
#   1. A PostgreSQL database service.
#   2. Your FastAPI API service.
#   3. A separate aggregator worker service.

version: '3.8' # Specify the Docker Compose file format version

services:
  db:
    image: postgres:15-alpine # Use a lightweight PostgreSQL image
    restart: always # Always restart the database service if it fails
    environment:
      POSTGRES_DB: feedmaster_db # Database name
      POSTGRES_USER: user # Database user
      POSTGRES_PASSWORD: password # Database password (CHANGE IN PRODUCTION!)
    volumes:
      - pgdata:/var/lib/postgresql/data # Persist database data to a named volume
    ports:
      - "5432:5432" # Map host port 5432 to container port 5432

  api:
    build:
      context: . # Build from the current directory (where Dockerfile is located)
      dockerfile: Dockerfile # Specify the Dockerfile to use
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload # Run FastAPI with Uvicorn in development mode (with hot-reloads)
    volumes:
      - ./backend:/app # Mount the backend code into the container for live reloading
      - ./config:/app/config # Mount the config directory
    ports:
      - "8000:8000" # Map host port 8000 to container port 8000
    environment:
      # Load environment variables from the .env file.
      # Docker Compose automatically loads .env in the same directory as docker-compose.yml.
      # DATABASE_URL should be defined in your .env file:
      # DATABASE_URL=postgresql://user:password@db:5432/feedmaster_db
      # SECRET_KEY should also be defined in your .env file.
      SECRET_KEY: "y!jW%Nf@2P$6tQ^u&Z*v8x+0m_L-aSg)K;c3dJ[E{F]H=O}R|lX/B:I.C,4D5V7U9G{T>1M}Y<X.z0_H`P~q" # Replace with a strong, random key
    depends_on:
      - db # Ensure the database service starts before the API service

  aggregator_worker:
    build:
      context: . # Build from the current directory
      dockerfile: Dockerfile # Use the same Dockerfile as the API
    command: python aggregator_worker.py # Command to run the aggregator worker script
    volumes:
      - ./backend:/app # Mount the backend code
      - ./config:/app/config # Mount the config directory
    environment:
      SECRET_KEY: "y!jW%Nf@2P$6tQ^u&Z*v8x+0m_L-aSg)K;c3dJ[E{F]H=O}R|lX/B:I.C,4D5V7U9G{T>1M}Y<X.z0_H`P~q" # Same secret key
      # DATABASE_URL will be loaded from .env
    depends_on:
      - db # Ensure the database is ready before the worker starts
    # If you need to make external API calls (e.g., to Bluesky), ensure network access.
    # No explicit port mapping needed unless you want to expose a health check or metrics.

volumes:
  pgdata: # Define the named volume for PostgreSQL data persistence
